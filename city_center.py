# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# proj_cal.py
# Created on: 2014-04-28 15:29:38.00000
#   (generated by ArcGIS/ModelBuilder)
# Description: 
# ---------------------------------------------------------------------------

# Import arcpy module
import arcpy
from arcpy import env
import sys
import shapefile
import shpUtils
import timeit

#Overwriting allowed
arcpy.env.overwriteOutput = True

#Working Directory
arcpy.env.workspace = "C:\\Users\\Matthew\\Desktop\\ECON\\Research\\Urban\\Papers\\City Center Resurgence\\GIS\\Working Files\\Output\\"
arcpy.env.qualifiedFieldNames = False

#Inputs

state_10 = "C:\\Users\\Matthew\\Desktop\\ECON\\Research\\Urban\\Papers\\City Center Resurgence\\GIS\\urban_area_2010\\states_2010\\"
tract_00 = "C:\\Users\\Matthew\\Desktop\\ECON\\Research\\Urban\\Papers\\City Center Resurgence\\GIS\\2000\\"
tract_12 = "C:\\Users\\Matthew\\Desktop\\ECON\\Research\\Urban\\Papers\\City Center Resurgence\\GIS\\2012\\" 
urban_00 = "C:\\Users\\Matthew\\Desktop\\ECON\\Research\\Urban\\Papers\\City Center Resurgence\\GIS\\urban_area_2000\\"
urban_10 = "C:\\Users\\Matthew\\Desktop\\ECON\\Research\\Urban\\Papers\\City Center Resurgence\\GIS\\urban_area_2010\\"

wac = "C:\\Users\\Matthew\\Desktop\\ECON\\Research\\Urban\\Papers\\City Center Resurgence\\GIS\\Working Files\\wac_trct.xlsx\\wac$"	
acs = "C:\\Users\\Matthew\\Desktop\\ECON\\Research\\Urban\\Papers\\City Center Resurgence\\GIS\\Working Files\\ACS_2012.xlsx\\ACS_2012$"	
dec = "C:\\Users\\Matthew\\Desktop\\ECON\\Research\\Urban\\Papers\\City Center Resurgence\\GIS\\Working Files\\DEC_2000.xlsx\\DEC_2000$"	
#dec = "C:\\Users\\Matthew\\Desktop\\ECON\\Research\\Urban\\Papers\\City Center Resurgence\\GIS\\Working Files\\DEC_2000.csv"	

# Local variables:
urban_area_tracts_0 = "urban_area_tracts_0.shp"
us_states_2010 = state_10 + "us_states_2010.shp"
urban_areas_2000_shp = urban_00 + "urban_areas_2000.shp"
ua_us_tracts_00 = urban_00 + "ua_us_tracts_00.shp"
urban_areas_2010_shp = urban_10 + "urban_areas_2010.shp"
us_tracts_2000 = tract_00+"US_tract_2000.shp"
layerName = "urban_tracts_lyr"
layer_acs = "ua_acs_lyr"
layer_dec = "ua_dec_lyr"
valid_trcts = "valid_trcts"
uat_hspt_hi = "uat_hspt_hi"
uat_hspt_lyr = "uat_hspt_lyr"
uat_split_lyr = "uat_split_lyr"
#uat_cen_cluster = "uat_cen_cluster"

uat_emp_hspt_dis = "C:\\Users\\Matthew\\Desktop\\ECON\\Research\\Urban\\Papers\\City Center Resurgence\\GIS\\Working Files\\Output\\uat_emp_hspt_dis.shp"
uat_emp_hspt_split = "C:\\Users\\Matthew\\Desktop\\ECON\\Research\\Urban\\Papers\\City Center Resurgence\\GIS\\Working Files\\Output\\uat_emp_hspt_split.shp"
uat_hspt_max = "C:\\Users\\Matthew\\Desktop\\ECON\\Research\\Urban\\Papers\\City Center Resurgence\\GIS\\Working Files\\Output\\uat_hspt_max.dbf"

#print "- Area clip of Census Tracts"
# Process: Clip (2)
#arcpy.Clip_analysis(us_tracts_2000, urban_areas_2000_shp, ua_us_tracts_00, "")

#Top n Urban Areas to loop over

n = 100

#--------------------------------------------------------------------

#Import Urban Area List for Loop

f = open('C:\\Users\\Matthew\\Desktop\\ECON\\Research\\Urban\\Papers\\City Center Resurgence\\GIS\\Working Files\\ua_rank_2010.txt', 'r')

ua_list = []
		
for lines in f:
		ua_list = ua_list + [lines.replace("\n","")]
		

del ua_list[0]

#print ua_list[:n]

st = []

for c in ua_list:
		st = st + [c[c.find(",")+2:]]
		
st_tuple = []		
for s in st:
		st_tuple = st_tuple + [tuple(s.split("--"))]

# for c in range(N):
		# print ua[c]
		# st = st_tuple[c]
		# for s in range(len(st)):
				# print st[s]
				
				
		#sys.exit(0)

f.close()	
#------------------------------------------------------------------------
	
#ID UTM ZONE

#UTM Dictionary

# utm_dict = {}
# utm_dict['10'] = (120,126)
# utm_dict['11'] = (114, 119)	
# utm_dict['12'] = (108, 113)
# utm_dict['13'] = (102, 107)
# utm_dict['14'] = (96, 101)
# utm_dict['15'] = (90, 95)
# utm_dict['16'] = (84, 89)
# utm_dict['17'] = (78, 83)
# utm_dict['18'] = (72, 77)	

#UTM Tuple

utm_tuple = [(120, 127, '10')]+[(114,119,'11')]+[(108, 113, '12')]+[(102,107,'13')]\
           +[(96,101, '14')]+[(90,95, '15')]+[(84,89, '16')]+[(78,83,'17')]+[(72,77,'18')]+[(66,71,'19')]
		   
		  
#print utm_tuple
	
#Pull longitude from tracts file	

#Import Urban Area List for Loop

f = open('C:\\Users\\Matthew\\Desktop\\ECON\\Research\\Urban\\Papers\\City Center Resurgence\\GIS\\urban_area_2010\\Urban_Areas_Long_2010.txt', 'r')

ua_list_2 = []
		
for lines in f:
		ua_list_2 = ua_list_2 + [lines.replace("\n","")]
		

del ua_list_2[0]
ua_tuple = []

for u in ua_list_2:
		ua_tuple = ua_tuple + [tuple(u.split("*"))]
		
#print ua_list[:n]

ua_dict = {}

for u in ua_tuple:
		#print u[1]
		ua_dict[u[0]] = abs(int(float(u[1])))

#print ua_dict['Boston, MA--NH--RI']

long_dict = {}

for u in ua_dict:
		for utm in utm_tuple:
				if ua_dict[u] >= utm[0] and ua_dict[u] <= utm[1]: long_dict[u] = utm[2]
				
#print ua_dict		
# print ua_dict['"Los Angeles--Long Beach--Anaheim, CA"']
# print ua_dict['"Santa Barbara, CA"']

# print long_dict['"Los Angeles--Long Beach--Anaheim, CA"']
# print long_dict['"Santa Barbara, CA"']

# print long_dict

#------------------------------------------------------------------

n_s = 50				
n_e = 101

for c in range(n_s, n_e):
		
		start = timeit.default_timer()
		
		#Local variables for called city/urban area
		
		ua = ua_list[c]
		st = st_tuple[c]
		
		#Module 1 - Relevant Tracts
		
		state_tracts_union = "state_tracts_union.shp"
		state_tracts_clip = "state_tracts_clip.shp"
		state_tracts_union_prj = "state_tracts_union_prj.shp"
		urban_area_tracts = "urban_area_tracts_"+str(c)+".shp"
		ua_tracts_00 = "urban_area_tracts00_"+str(c)+".shp"
		
		#Module 2 - LEHD Join and Emp Clusters
		
		urban_area_join   = "urban_area_lehd_join_"+str(c)+".shp"
		ua_lehd_acs = "ua_lehd_acs_"+str(c)+".shp"
		ua_dec = "ua_dec_"+str(c)+".shp"
		urban_area_tracts_prj = "urban_area_tracts_prj.shp"
		uat_emp_hspt = "uat_emp_hspt_"+str(c)+".shp"
		uat_inc_hspt = "uat_inc_hspt_"+str(c)+".shp"
		uat_pw_hspt  = "uat_pw_hspt_"+str(c)+".shp"
		uat_inc_hspt00 = "uat_inc_hspt00_"+str(c)+".shp"
		uat_pw_hspt00  = "uat_pw_hspt00_"+str(c)+".shp"
		urban_area = "urban_area"
		
		#Module 3 - City Center Definition
		
		uat_cen_cluster = "uat_cen_cluster_"+str(c)+".shp"
		uat_emp_hspt_dis = "uat_emp_hspt_dis.shp"
		uat_emp_hspt_split = "uat_emp_hspt_split.shp"
		uat_hspt_max = "uat_hspt_max.dbf"
		uat_cen_point = "uat_cen_point_"+str(c)+".shp"
		urban_area_lyr = "urban_area_lyr"
		urban_area_lyr00 = "urban_area_lyr00"
		uat_cen1 = "uat_cen1_"+str(c)+".shp"
		uat_cen2 = "uat_cen2_"+str(c)+".shp"
		uat_cen3 = "uat_cen3_"+str(c)+".shp"
		uat_cen00_1 = "uat_cen00_1_"+str(c)+".shp"
		uat_cen00_2 = "uat_cen00_2_"+str(c)+".shp"
		uat_cen00_3 = "uat_cen00_3_"+str(c)+".shp"

		##MODULE 1
		
		print "("+str(c)+") "+ua
		
		#2000
		
		print "[2000]"
		
		st_list = []
		for s in range(len(st)):
			st_list = st_list + [tract_00 + st[s] + "_tracts_00.shp"]	
		
		print "- Merge for Multi-state Areas"
		# Process: Merge
		#arcpy.Union_analysis(st_list[:len(st)], state_tracts_union_shp, "ALL", "", "GAPS")
		arcpy.Merge_management(st_list[:len(st)], state_tracts_union,)
				
		#print "- Project"
		# Process: Project
		#arcpy.Project_management(urban_area_tracts, urban_area_tracts_prj, "PROJCS['NAD_1983_UTM_Zone_18N',GEOGCS['GCS_North_American_1983',DATUM['D_North_American_1983',SPHEROID['GRS_1980',6378137.0,298.257222101]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Transverse_Mercator'],PARAMETER['False_Easting',500000.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',-75.0],PARAMETER['Scale_Factor',0.9996],PARAMETER['Latitude_Of_Origin',0.0],UNIT['Meter',1.0]]", "", "GEOGCS['GCS_North_American_1983',DATUM['D_North_American_1983',SPHEROID['GRS_1980',6378137.0,298.257222101]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]]")
		 
		utm_zone = 'NAD 1983 UTM Zone '+long_dict[ua]+'N'
		# print "- Project: "+utm_zone
		outCS = arcpy.SpatialReference(utm_zone)
		arcpy.Project_management(state_tracts_union, state_tracts_union_prj, outCS)

		print "- Add Area Field"
		# Process: Add Field
		arcpy.AddField_management(state_tracts_union_prj, "AREA", "DOUBLE", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")

		print "- Compute Area"
		# Process: Calculate Field
		arcpy.CalculateField_management(state_tracts_union_prj, "AREA", "!SHAPE.AREA@SQUAREMILES!", "PYTHON_9.3")

		print "- State Clip"
		# Process: Clip
		arcpy.Clip_analysis(state_tracts_union_prj, us_states_2010, state_tracts_clip, "")

		print "- Limit to Relevant Area"
		# Process: Make Feature Layer : This is an important simplification, for now, everything is w.r.t to 2010!
		name_select = "\"NAME10\" = '" + ua + "'"
		# #arcpy.MakeFeatureLayer_management(urban_areas_2010_shp, urban_area, "\"NAME10\" = 'Philadelphia, PA--NJ--DE--MD'", "", "FID FID VISIBLE NONE;Shape Shape VISIBLE NONE;UACE10 UACE10 VISIBLE NONE;AFFGEOID10 AFFGEOID10 VISIBLE NONE;GEOID10 GEOID10 VISIBLE NONE;NAME10 NAME10 VISIBLE NONE;NAMELSAD10 NAMELSAD10 VISIBLE NONE;LSAD10 LSAD10 VISIBLE NONE;UATYP10 UATYP10 VISIBLE NONE;ALAND10 ALAND10 VISIBLE NONE")
		arcpy.MakeFeatureLayer_management(urban_areas_2010_shp, urban_area, name_select, "", "FID FID VISIBLE NONE;Shape Shape VISIBLE NONE;UACE10 UACE10 VISIBLE NONE;AFFGEOID10 AFFGEOID10 VISIBLE NONE;GEOID10 GEOID10 VISIBLE NONE;NAME10 NAME10 VISIBLE NONE;NAMELSAD10 NAMELSAD10 VISIBLE NONE;LSAD10 LSAD10 VISIBLE NONE;UATYP10 UATYP10 VISIBLE NONE;ALAND10 ALAND10 VISIBLE NONE")
		
		print "- Area clip of Census Tracts"
		# Process: Clip (2)
		arcpy.Clip_analysis(state_tracts_clip, urban_area, ua_tracts_00, "")
		
		print "- Join DEC Data"
		# Process: Feature Layer
		arcpy.MakeFeatureLayer_management (ua_tracts_00,  layer_dec)
		# Process: Add Join
		arcpy.AddJoin_management(layer_dec, "CTIDFP00", dec, "geoid2", "KEEP_COMMON")
		arcpy.CopyFeatures_management(layer_dec, ua_dec)		
		
		print "- Income and Race Clusters - 2500 m"
		# Process: Hot Spot Analysis (Getis-Ord Gi*)
		arcpy.HotSpots_stats(ua_dec, "income_hh_", uat_inc_hspt00, "ZONE_OF_INDIFFERENCE", "EUCLIDEAN_DISTANCE", "NONE", "2500", "", "")
		arcpy.HotSpots_stats(ua_dec, "perc_white", uat_pw_hspt00, "ZONE_OF_INDIFFERENCE", "EUCLIDEAN_DISTANCE", "NONE", "2500", "", "")
		
		#2012
		
		#Generate state, urban area lists (for projections, etc.)
				
		print "[2012]"
		
		st_list = []
		for s in range(len(st)):
			st_list = st_list + [tract_12 + st[s] + "_tracts_12.shp"]		
				
		print "- Merge for Multi-state Areas"
		# Process: Merge
		#arcpy.Union_analysis(st_list[:len(st)], state_tracts_union_shp, "ALL", "", "GAPS")
		arcpy.Merge_management(st_list[:len(st)], state_tracts_union,)
				
		# print "- Project"
		# Process: Project
		#arcpy.Project_management(urban_area_tracts, urban_area_tracts_prj, "PROJCS['NAD_1983_UTM_Zone_18N',GEOGCS['GCS_North_American_1983',DATUM['D_North_American_1983',SPHEROID['GRS_1980',6378137.0,298.257222101]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Transverse_Mercator'],PARAMETER['False_Easting',500000.0],PARAMETER['False_Northing',0.0],PARAMETER['Central_Meridian',-75.0],PARAMETER['Scale_Factor',0.9996],PARAMETER['Latitude_Of_Origin',0.0],UNIT['Meter',1.0]]", "", "GEOGCS['GCS_North_American_1983',DATUM['D_North_American_1983',SPHEROID['GRS_1980',6378137.0,298.257222101]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]]")
		 
		utm_zone = 'NAD 1983 UTM Zone '+long_dict[ua]+'N'
		print "- Project: "+utm_zone
		outCS = arcpy.SpatialReference(utm_zone)
		arcpy.Project_management(state_tracts_union, state_tracts_union_prj, outCS)

		print "- Add Area Field"
		# Process: Add Field
		arcpy.AddField_management(state_tracts_union_prj, "AREA", "DOUBLE", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")

		print "- Compute Area"
		# Process: Calculate Field
		arcpy.CalculateField_management(state_tracts_union_prj, "AREA", "!SHAPE.AREA@SQUAREMILES!", "PYTHON_9.3")

		print "- State Clip"
		# Process: Clip
		arcpy.Clip_analysis(state_tracts_union_prj, us_states_2010, state_tracts_clip, "")

		print "- Limit to Relevant Area"
		# Process: Make Feature Layer
		name_select = "\"NAME10\" = '" + ua + "'"
		# #arcpy.MakeFeatureLayer_management(urban_areas_2010_shp, urban_area, "\"NAME10\" = 'Philadelphia, PA--NJ--DE--MD'", "", "FID FID VISIBLE NONE;Shape Shape VISIBLE NONE;UACE10 UACE10 VISIBLE NONE;AFFGEOID10 AFFGEOID10 VISIBLE NONE;GEOID10 GEOID10 VISIBLE NONE;NAME10 NAME10 VISIBLE NONE;NAMELSAD10 NAMELSAD10 VISIBLE NONE;LSAD10 LSAD10 VISIBLE NONE;UATYP10 UATYP10 VISIBLE NONE;ALAND10 ALAND10 VISIBLE NONE")
		arcpy.MakeFeatureLayer_management(urban_areas_2010_shp, urban_area, name_select, "", "FID FID VISIBLE NONE;Shape Shape VISIBLE NONE;UACE10 UACE10 VISIBLE NONE;AFFGEOID10 AFFGEOID10 VISIBLE NONE;GEOID10 GEOID10 VISIBLE NONE;NAME10 NAME10 VISIBLE NONE;NAMELSAD10 NAMELSAD10 VISIBLE NONE;LSAD10 LSAD10 VISIBLE NONE;UATYP10 UATYP10 VISIBLE NONE;ALAND10 ALAND10 VISIBLE NONE")
		
		print "- Area clip of Census Tracts"
		# Process: Clip (2)
		arcpy.Clip_analysis(state_tracts_clip, urban_area, urban_area_tracts, "")
				
		##MODULE 2
		
		#NEED TO ADD BOSTON FIX
		
		print "- Join to LEHD"
		# Process: Feature Layer
		arcpy.MakeFeatureLayer_management (urban_area_tracts,  layerName)
		# Process: Add Join
		arcpy.AddJoin_management(layerName, "GEOID", wac, "trct", "KEEP_COMMON")
		arcpy.CopyFeatures_management(layerName, urban_area_join)		

		print "- Join ACS Data"
		# Process: Feature Layer
		arcpy.MakeFeatureLayer_management (urban_area_join,  layer_acs)
		# Process: Add Join
		arcpy.AddJoin_management(layer_acs, "GEOID", acs, "geoid2", "KEEP_COMMON")
		arcpy.CopyFeatures_management(layer_acs, ua_lehd_acs)
				
		print "- Limit to Non-Truncated Tracts"
		# Process: Make Feature Layer
		thr = 0.001
		name_select = "\"AREA\" > " + str(thr)
		#print name_select
		# Process: Make Feature Layer
		arcpy.MakeFeatureLayer_management(ua_lehd_acs, valid_trcts, "\"AREA\" > 0.001", "", "FID FID VISIBLE NONE;Shape Shape VISIBLE NONE;STATEFP STATEFP VISIBLE NONE;COUNTYFP COUNTYFP VISIBLE NONE;TRACTCE TRACTCE VISIBLE NONE;GEOID GEOID VISIBLE NONE;NAME NAME VISIBLE NONE;NAMELSAD NAMELSAD VISIBLE NONE;MTFCC MTFCC VISIBLE NONE;FUNCSTAT FUNCSTAT VISIBLE NONE;ALAND ALAND VISIBLE NONE;AWATER AWATER VISIBLE NONE;INTPTLAT INTPTLAT VISIBLE NONE;INTPTLON INTPTLON VISIBLE NONE;AREA AREA VISIBLE NONE;state state VISIBLE NONE;trct trct VISIBLE NONE;trctname trctname VISIBLE NONE;ca01 ca01 VISIBLE NONE;ca02 ca02 VISIBLE NONE;ca03 ca03 VISIBLE NONE;ce01 ce01 VISIBLE NONE;ce02 ce02 VISIBLE NONE;ce03 ce03 VISIBLE NONE;cns01 cns01 VISIBLE NONE;cns02 cns02 VISIBLE NONE;cns03 cns03 VISIBLE NONE;cns04 cns04 VISIBLE NONE;cns05 cns05 VISIBLE NONE;cns06 cns06 VISIBLE NONE;cns07 cns07 VISIBLE NONE;cns08 cns08 VISIBLE NONE;cns09 cns09 VISIBLE NONE;cns10 cns10 VISIBLE NONE;cns11 cns11 VISIBLE NONE;cns12 cns12 VISIBLE NONE;cns13 cns13 VISIBLE NONE;cns14 cns14 VISIBLE NONE;cns15 cns15 VISIBLE NONE;cns16 cns16 VISIBLE NONE;cns17 cns17 VISIBLE NONE;cns18 cns18 VISIBLE NONE;cns19 cns19 VISIBLE NONE;cns20 cns20 VISIBLE NONE;cr01 cr01 VISIBLE NONE;cr02 cr02 VISIBLE NONE;cr03 cr03 VISIBLE NONE;cr04 cr04 VISIBLE NONE;cr05 cr05 VISIBLE NONE;cr07 cr07 VISIBLE NONE;ct01 ct01 VISIBLE NONE;ct02 ct02 VISIBLE NONE;cd01 cd01 VISIBLE NONE;cd02 cd02 VISIBLE NONE;cd03 cd03 VISIBLE NONE;cd04 cd04 VISIBLE NONE;cs01 cs01 VISIBLE NONE;cs02 cs02 VISIBLE NONE;cfa01 cfa01 VISIBLE NONE;cfa02 cfa02 VISIBLE NONE;cfa03 cfa03 VISIBLE NONE;cfa04 cfa04 VISIBLE NONE;cfa05 cfa05 VISIBLE NONE;cfs01 cfs01 VISIBLE NONE;cfs02 cfs02 VISIBLE NONE;cfs03 cfs03 VISIBLE NONE;cfs04 cfs04 VISIBLE NONE;cfs05 cfs05 VISIBLE NONE;emp_dens emp_dens VISIBLE NONE")

		print "- Add Emp Dens Field"
		# Process: Add Field
		arcpy.AddField_management(valid_trcts, "EMP_DENS", "DOUBLE", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")

		print "- Compute Emp Dens"
		# Process: Calculate Field
		arcpy.CalculateField_management(valid_trcts, "emp_dens", "[ca01]/ [AREA]", "VB", "")

		print "- Employment Clusters - 500 m"
		# Process: Hot Spot Analysis (Getis-Ord Gi*)
		arcpy.HotSpots_stats(valid_trcts, "emp_dens", uat_emp_hspt, "FIXED_DISTANCE_BAND", "EUCLIDEAN_DISTANCE", "NONE", "500", "", "")
		
		print "- Income and Race Clusters - 2500 m"
		# Process: Hot Spot Analysis (Getis-Ord Gi*)
		arcpy.HotSpots_stats(valid_trcts, "income_hh_", uat_inc_hspt, "ZONE_OF_INDIFFERENCE", "EUCLIDEAN_DISTANCE", "NONE", "2500", "", "")
		arcpy.HotSpots_stats(valid_trcts, "perc_white", uat_pw_hspt, "ZONE_OF_INDIFFERENCE", "EUCLIDEAN_DISTANCE", "NONE", "2500", "", "")
				
		##MODULE 3
		
		print "- High Density Select"

		name_select = "\"GiZScore\" > 2.58"
		arcpy.MakeFeatureLayer_management(uat_emp_hspt, uat_hspt_hi, name_select)

		print "- Dissolve"

		# Process: Dissolve
		arcpy.Dissolve_management(uat_hspt_hi, uat_emp_hspt_dis, "FID", "", "MULTI_PART", "DISSOLVE_LINES")

		# Process: Multipart To Singlepart
		arcpy.MultipartToSinglepart_management(uat_emp_hspt_dis, uat_emp_hspt_split)

		# Process: Make Feature Layer
		arcpy.MakeFeatureLayer_management(uat_emp_hspt, uat_hspt_lyr, "", "", "FID FID VISIBLE NONE;Shape Shape VISIBLE NONE;SOURCE_ID SOURCE_ID VISIBLE NONE;emp_dens emp_dens VISIBLE NONE;GiZScore GiZScore VISIBLE NONE;GiPValue GiPValue VISIBLE NONE")

		print "- Max"

		# Process: Summary Statistics
		arcpy.Statistics_analysis(uat_hspt_lyr, uat_hspt_max, "GiZScore MAX", "")

		# Process: Add Join
		arcpy.AddJoin_management(uat_hspt_lyr, "GiZScore", uat_hspt_max, "MAX_GiZSco", "KEEP_COMMON")

		# Process: Make Feature Layer
		arcpy.MakeFeatureLayer_management(uat_emp_hspt_split, uat_split_lyr, "", "", "FID FID VISIBLE NONE;Shape Shape VISIBLE NONE;SOURCE_ID SOURCE_ID VISIBLE NONE;emp_dens emp_dens VISIBLE NONE;GiZScore GiZScore VISIBLE NONE;GiPValue GiPValue VISIBLE NONE")

		print "- Overlap - Extract Cluster"

		# Process: Select Layer By Location
		arcpy.SelectLayerByLocation_management(uat_split_lyr, "INTERSECT", uat_hspt_lyr, "", "NEW_SELECTION")

		# Write the selected features to a new featureclass
		arcpy.CopyFeatures_management(uat_split_lyr, uat_cen_cluster)

		# Process: Feature To Point
		arcpy.FeatureToPoint_management(uat_cen_cluster, uat_cen_point, "CENTROID")

		##Definition 1: distance from centroid of cluster (set a 1 mile, invariant)
		##Definition 2: distance from cluster polygon (set a 0.5 mile, variable)
		##Definition 3: central cluster (variable)
		
		arcpy.MakeFeatureLayer_management(ua_lehd_acs, urban_area_lyr)
		arcpy.MakeFeatureLayer_management(ua_dec, urban_area_lyr00)
		
		print "- Center Def 1"
		arcpy.SelectLayerByLocation_management(urban_area_lyr, "WITHIN_A_DISTANCE", uat_cen_point, "1 Miles", "NEW_SELECTION")
		arcpy.CopyFeatures_management(urban_area_lyr, uat_cen1)

		print "- Center Def 2"
		arcpy.SelectLayerByLocation_management(urban_area_lyr, "WITHIN_A_DISTANCE", uat_cen_cluster, "0.5 Miles", "NEW_SELECTION")
		arcpy.CopyFeatures_management(urban_area_lyr, uat_cen2)
		
		print "- Center Def 3"
		arcpy.SelectLayerByLocation_management(urban_area_lyr, "WITHIN", uat_cen_cluster, "", "NEW_SELECTION")
		arcpy.CopyFeatures_management(urban_area_lyr, uat_cen3)
		
		print "- Center Def 1 (2000)"
		arcpy.SelectLayerByLocation_management(urban_area_lyr00, "WITHIN_A_DISTANCE", uat_cen_point, "1 Miles", "NEW_SELECTION")
		arcpy.CopyFeatures_management(urban_area_lyr00, uat_cen00_1)

		print "- Center Def 2 (2000)"
		arcpy.SelectLayerByLocation_management(urban_area_lyr00, "WITHIN_A_DISTANCE", uat_cen_cluster, "0.5 Miles", "NEW_SELECTION")
		arcpy.CopyFeatures_management(urban_area_lyr00, uat_cen00_2)
		
		print "- Center Def 3 (2000)"
		arcpy.SelectLayerByLocation_management(urban_area_lyr00, "WITHIN", uat_cen_cluster, "", "NEW_SELECTION")
		arcpy.CopyFeatures_management(urban_area_lyr00, uat_cen00_3)

		stop = timeit.default_timer()

		print "Time:" + str((stop - start)/60) 